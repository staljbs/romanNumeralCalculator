Library: romanNumeralCalculator
===============================
Created By: Arjun Narang
===============================
Description:
=====================================================================================
This is a library to perform addition/subtraction operations on Roman Numeral Strings.


Build Instructions:
=====================================================================================
> Clone repository from GitHub : git clone https://github.com/staljbs/romanNumeralCalculator.git
> Change directory to the repository directory: cd <path-to-repo>/romanNumeralCalculator
> Run following commands on command line:
	$ cmake .
	$ make
> To test the overall working of the functions, run the 'main' program in 'src' folder with arguments as illustrated below:
	$ src/main XX + C
	$ src/main C - X
> To run the unit tests, use the following command on the command line:
	$ make test
> The results would be displayed on the screen. A log file would also be available in "log/test_overall.log"


Inputs:
===============
Input1: First Roman Numeral	(String)
Input2: Second Roman Numeral	(String)
Input3: Operator "+" or "-"	(String)


Output: Roman Numeral		(String)
	which is 
	addition 	(if Input3 == "+") or 
	subtraction 	(if Input3 == "-")
	of Input1 and Input2



Functions:
===================	
> Convert Input1 and Input2 Roman Numerals to Integers according to Roman Numeral Rules: 
  Functions: 
	int romanToInt(string)
> Depending on Input3, perform addition or subtraction on the Input1 and Input2 (integers):
  Functions:
	int romanSubtraction(int,int)
	int romanAddition(int, int)
> Convert result of operation addition/ subtraction to Roman Numeral according Roman Numeral Rules:
  Functions:
	string intToRoman(int)
 

Roman Numeral Rules:
===================

> Roman numerals consist of the following letters: I, V, X, L, C, D, and M which mean one, five, ten, fifty, hundred, five hundred and one thousand respectively.  

> As we are in Rome there are no such things as decimals or integers, we need to do this 
with the strings. An example would be "XIV" + "LX" = "LXXIV"
 
> Numerals can be concatenated to form a larger numeral ("XX" + "II" = "XXII")

> If a lesser numeral is put before a bigger it means subtraction of the lesser from the 
bigger ("IV" means four, "CM" means ninehundred)

> If the numeral is I, X or C you can't have more than three ("II" + "II" = "IV" not “IIII”)

> If the numeral is V, L or D you can't have more than one ("D" + "D" = "M" not “DD”)


Credits:
=============================================================================
> Initial source and check test files adapted from : /doc/example provided with check installation.
